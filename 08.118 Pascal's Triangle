void recursive_pascal(int **arr, int numRows, int i, int **returnColumnSizes) {
    if(i >= numRows) {
        return;
    }
    arr[i] = (int *)malloc(sizeof(int) * (i + 1));
    arr[i][0] = 1;
    arr[i][i] = 1;
    *(*returnColumnSizes + i) = i + 1;
    for(int j = 1; j < i; j++) {
        arr[i][j] = arr[i-1][j-1] + arr[i-1][j];
    }
    
    recursive_pascal(arr, numRows, i + 1, returnColumnSizes);
}

int** generate(int numRows, int* returnSize, int** returnColumnSizes){
    int **arr;
    int i;
    int j;
    
    *returnSize = numRows;
    
    /* Allocate memory for 2D Array. "arr" holds the base address of the complete 2D Array.*/
    arr = (int **)malloc(sizeof(int *) * numRows);
    
    *returnColumnSizes = (int *)malloc(sizeof(int) * numRows);
    
    recursive_pascal(arr, numRows, 0, returnColumnSizes);
    
    return arr;
}
